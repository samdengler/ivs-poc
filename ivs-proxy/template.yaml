AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  ## Lambda Proxy Functions ##
  IvsProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: proxy/
      Handler: index.ivsHandler
      Runtime: nodejs12.x
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt IvsProxyFunctionSecurityGroup.GroupId
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          APPLICATION_LOAD_BALANCER_DNS_NAME: !GetAtt ApplicationLoadBalancer.DNSName
      Events:
        IvsStreamRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - "aws.ivs"
              detail-type:
                - "IVS Stream State Change"

  IvsProxyFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Identify IvsProxyFunction
      VpcId: !Ref VpcId

  ## IVS All EventBridge Logging
  IvsAllLogRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: !Sub "${AWS::StackName}-IvsAllLogs"
      EventPattern:
        source:
          - "aws.ivs"
      Targets:
        - Id: 'CloudWatchLogs'
          # Arn: !GetAtt IvsAllLogGroup.Arn
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${IvsAllLogGroup}"

  IvsAllLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub '/aws/events/${AWS::StackName}/ivs/all'
    
  ## IVS Stream EventBridge Logging
  IvsStreamLogRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: !Sub "${AWS::StackName}-IvsStreamLogs"
      EventPattern:
        source:
          - "aws.ivs"
        detail-type:
          - "IVS Stream State Change"
      Targets:
        - Id: 'CloudWatchLogs'
          # Arn: !GetAtt IvsAllLogGroup.Arn
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${IvsStreamLogGroup}"

  IvsStreamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub '/aws/events/${AWS::StackName}/ivs/stream'
    
  ## Application Load Balancer ##
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets: !Ref SubnetIds

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt IvsProxyFunctionSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  ApplicationLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404

  ApplicationLoadBalancerListenerRuleIvs:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Priority: 1
      ListenerArn: !Ref ApplicationLoadBalancerHttpListener
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/ivs"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref IvsHandlerFunctionTargetGroup

  ## IVS Lambda Target
  IvsHandlerFunctionTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt IvsHandlerFunction.Arn

  IvsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stream/
      Handler: index.ivsHandler
      Runtime: nodejs12.x
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref IvsHandlerControlTable
      Environment:
        Variables:
          IVS_HANDLER_CONTROL_TABLE: !Ref IvsHandlerControlTable

  IvsHandlerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IvsHandlerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  
  IvsHandlerControlTable:
    Type: AWS::Serverless::SimpleTable

  ## TODO ##
  # LogGroup.Arn
  # Move from LogFunction to StreamHandler and add SNS vs EB 
  # HTTPS
  # ECS?
  # Lambda Tester