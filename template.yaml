AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  ## Lambda Proxy Function ##
  IvsProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: proxy.handler
      Runtime: nodejs12.x
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt IvsProxyFunctionSecurityGroup.GroupId
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          ApplicationLoadBalancerDNSName: !GetAtt ApplicationLoadBalancer.DNSName
      Events:
        Rule:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - "aws.ivs"
                - "my.aws.ivs" 

  IvsProxyFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Identify IvsProxyFunction
      VpcId: !Ref VpcId

  ## IVS EventBridge Logging
  IvsAllLogRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: IvsAllLogRule
      EventPattern:
        source:
          - "aws.ivs"
          - "my.aws.ivs" 
      Targets:
        - Id: 'CloudWatchLogs'
          # Arn: !GetAtt IvsAllLogGroup.Arn
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${IvsAllLogGroup}"

  IvsAllLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: '/aws/events/ivs/all'
    
  ## Application Load Balancer ##
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets: !Ref SubnetIds

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt IvsProxyFunctionSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  ApplicationLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StreamHandlerFunctionTargetGroup

  ## Application Load Balancer Lambda Target
  StreamHandlerFunctionTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt StreamHandlerFunction.Arn

  StreamHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: log.handler
      Runtime: nodejs12.x
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt StreamHandlerFunctionSecurityGroup.GroupId
        SubnetIds: !Ref SubnetIds

  StreamHandlerFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Identify StreamHandlerFunction
      VpcId: !Ref VpcId

  ApplicationLoadBalancerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StreamHandlerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  
  ## TODO ##
  # LogGroup for EB Rule - how to do this with SAM?  don't add another Rule/Target
  # Move from LogFunction to StreamHandler and add SNS vs EB 
  # Lambda Tester